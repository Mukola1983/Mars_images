{"version":3,"sources":["API/Utils.js","API/rovers.js","App.js","reportWebVitals.js","index.js"],"names":["Utils","checkStatus","response","status","error","Error","statusText","parseJSON","json","fetchJSON","url","fetch","then","curiosity","spirit","opportynity","API_KEY","App","useState","userInput","setUserInput","value","setValue","onClick","roverName","page","sol","camera","data","console","log","photos","catch","type","onChange","e","preventDefault","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMAAqBA,E,kCAAAA,EACZC,YAAc,SAACC,GACpB,GAAIA,EAASC,QAAU,KAAOD,EAASC,OAAS,IAC9C,OAAOD,EAET,IAAME,EAAQ,IAAIC,MAAMH,EAASI,YAGjC,MADAF,EAAMF,SAAWA,EACXE,GARWJ,EAWZO,UAAY,SAACL,GAAD,OAAcA,EAASM,QAXvBR,EAaZS,UAAY,SAACC,GAAD,OACjBC,MAAMD,GAAKE,KAdMZ,EAcIC,aAAaW,KAdjBZ,EAc2BO,YAd3BP,EAgBZa,UACL,qNAjBiBb,EAmBZc,OACL,+KApBiBd,EAsBZe,YACL,8FCnBJ,IAAMC,EAAU,2C,OCDD,SAASC,IACtB,MAAkCC,mBAAS,WAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAgBA,OACE,gCACE,4BAAIH,IACJ,wBAAQI,QAVG,WDRO,IAACC,EAAWC,EAAMC,EAAKC,GAAtBH,ECSZ,YDTuBC,ECSV,EDTgBC,ECSb,EDR3B1B,EAAMS,UAAN,yDACoDe,EADpD,uBAC4EE,EAD5E,iBACwFD,EADxF,YACgGE,EADhG,oBACkHX,KCQ7GJ,MAAK,SAACgB,GACLC,QAAQC,IAAIF,EAAKG,WAElBC,OAAM,gBAKP,mBACA,uBAAOC,KAAK,OAAOC,SAnBF,SAACC,GACpBA,EAAEC,iBACFd,EAASa,EAAEE,OAAOhB,UAkBhB,wBAAQE,QAhBS,WACnBH,EAAaC,IAeX,yBC1BN,IAYeiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC/B,EAAD,MAEFgC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e400b48a.chunk.js","sourcesContent":["export default class Utils {\r\n  static checkStatus = (response) => {\r\n    if (response.status >= 200 && response.status < 300) {\r\n      return response\r\n    }\r\n    const error = new Error(response.statusText)\r\n\r\n    error.response = response\r\n    throw error\r\n  }\r\n\r\n  static parseJSON = (response) => response.json()\r\n\r\n  static fetchJSON = (url) =>\r\n    fetch(url).then(this.checkStatus).then(this.parseJSON)\r\n\r\n  static curiosity =\r\n    'url(https://media.istockphoto.com/photos/mars-rover-robotic-space-autonomous-vehicle-on-a-deserted-planet-with-picture-id1006754478?k=6&m=1006754478&s=612x612&w=0&h=_Hi8PjNujyMRYbgQ4Dc73dKTs6kcd9UGK_nN2m-Q7QA=)'\r\n\r\n  static spirit =\r\n    'url(https://www.usnews.com/dims4/USNEWS/65864f1/2147483647/resize/640x/quality/85/?url=https%3A%2F%2Fwww.usnews.com%2Fdbimages%2Fmaster%2F13635%2FFE_PR_091112NASArover.jpg)'\r\n\r\n  static opportynity =\r\n    'url(https://solarsystem.nasa.gov/system/content_pages/main_images/1057_1057_rover2_768.jpg)'\r\n}\r\n\r\n// 59CDafTnK5TeXMtpaRwlrBGoJJ0WoLciNEVfIe5z\r\n","import Utils from './Utils'\r\n\r\n// const API_KEY = process.env.REACT_APP_MARS_KEY;\r\n\r\nconst API_KEY = '59CDafTnK5TeXMtpaRwlrBGoJJ0WoLciNEVfIe5z'\r\n\r\nexport const getPhoto = (roverName, page, sol, camera) =>\r\n  Utils.fetchJSON(\r\n    `https://api.nasa.gov/mars-photos/api/v1/rovers/${roverName}/photos?sol=${sol}&page=${page}&${camera}&api_key=${API_KEY}`\r\n  )\r\n\r\nexport const manifest = () =>\r\n  Utils.fetchJSON(\r\n    `https://api.nasa.gov/mars-photos/api/v1/rovers/?api_key=${API_KEY}`\r\n  )\r\n","import React, { useState } from 'react'\nimport { getPhoto } from './API/rovers'\n\nexport default function App() {\n  const [userInput, setUserInput] = useState('dfsdfsd')\n  const [value, setValue] = useState('')\n  const ochangeInput = (e) => {\n    e.preventDefault()\n    setValue(e.target.value)\n  }\n  const clickHandler = () => {\n    setUserInput(value)\n  }\n\n  const getApi = () => {\n    getPhoto('Curiosity', 1, 1)\n      .then((data) => {\n        console.log(data.photos)\n      })\n      .catch(() => {})\n  }\n  return (\n    <div>\n      <p>{userInput}</p>\n      <button onClick={getApi}>sssss</button>\n      <input type=\"text\" onChange={ochangeInput} />\n      <button onClick={clickHandler}>clsssick</button>\n    </div>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}